---
- name: Setup Prerequisites To Install Kubernetes
  hosts: instance
  become: true
  vars:
    kube_prereq_packages: [curl, ca-certificates, apt-transport-https]
    kube_packages: [kubeadm, kubectl, kubelet]

  tasks:
    - name: Test Reacheability
      ansible.builtin.ping:

    - name: Update Cache
      ansible.builtin.apt:
        update_cache: true
        autoclean: true
    - name: Wait for dpkg lock release
      command: "sleep 5"
      retries: 10
      delay: 10
      register: result
      until: result.rc == 0
      ignore_errors: yes

    - name: 1. Upgrade All the Packages to the latest
      ansible.builtin.apt:
        upgrade: "full"

    - name: 2. Install Qemu-Guest-Agent
      ansible.builtin.apt:
        name:
          - qemu-guest-agent
        state: present

    - name: 3. Setup a Container Runtime
      ansible.builtin.apt:
        name:
          - containerd
        state: present

    - name: 4. Start Containerd If Stopped
      ansible.builtin.service:
        name: containerd
        state: started

    - name: 5. Create Containerd Directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: 6. Check config.toml Exists
      ansible.builtin.stat:
        path: /etc/containerd/config.toml
      register: pre_file_exist_result

    - name: 6.1 Delete config.toml Exists
      ansible.builtin.file:
        path: /etc/containerd/config.toml
        state: absent
      when: pre_file_exist_result.stat.exists

    - name: 7. Place Default Containerd Config Inside It
      ansible.builtin.shell: |
        set -o pipefail
        containerd config default | sudo tee /etc/containerd/config.toml
      register: output
      changed_when: output.rc != 0
      args:
        executable: /bin/bash
      tags:
        - containerd_config

    - name: 7.1 Check If New config.toml Exists Now
      ansible.builtin.stat:
        path: /etc/containerd/config.toml
      register: post_file_exist_result
      tags:
        - containerd_config

    - name: 7.2 Exit The Play If config.toml Does Not Exist
      ansible.builtin.meta: end_play
      when: not post_file_exist_result.stat.exists
      tags:
        - containerd_config

    - name: 8.1 Disable Swap
      ansible.builtin.command: sudo swapoff -a
      register: output
      changed_when: output.rc != 0
      tags:
        - disable_swap

    - name: 8.2 Disable Swap permanently
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      tags:
        - disable_swap

    - name: 9. Edit config.toml
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        after: \[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]
        regexp: SystemdCgroup = false
        replace: SystemdCgroup = true

    - name: 10. Enable Ipv4 Bridging
      ansible.builtin.replace:
        path: /etc/sysctl.conf
        regexp: ^#net\.ipv4\.ip_forward=1$
        replace: net.ipv4.ip_forward=1

    - name: 11.1 Delete k8s Config If Exists
      ansible.builtin.file:
        path: /etc/modules-load.d/k8s.conf
        state: absent
      tags:
        - kube_config

    - name: 11.2 Add k8s.config and Edit It
      ansible.builtin.lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: br_netfilter
        create: true
        mode: "0755"
      tags:
        - kube_config

    - name: 12.1 Reboot
      ansible.builtin.reboot:
      register: system_reboot

    - name: 12.2 Verify Reboot Success
      ansible.builtin.ping:
      when: system_reboot.rebooted

    - name: 13.1 Update Cache
      ansible.builtin.apt:
        update_cache: true
        autoclean: true
      tags:
        - install_pre_kube_packages

    - name: 13.2 Remove apt lock file
      ansible.builtin.file:
        state: absent
        path: "/var/lib/dpkg/lock"
      tags:
        - install_pre_kube_packages

    - name: 13.3 Install Prerequisite Packages
      ansible.builtin.apt:
        name: "{{ kube_prereq_packages }}"
      tags:
        - install_pre_kube_packages

    - name: 13.4 Remove GPG Keys If They Exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /usr/share/keyrings/kubernetes-apt-keyring.gpg
        - /usr/share/keyrings/kubernetes-apt-keyring.gpg_armored
      tags:
        - install_pre_kube_packages

    - name: 13.5 Download Kubernetes APT Key
      ansible.builtin.command: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key -o /usr/share/keyrings/kubernetes-apt-keyring.gpg_armored
      args:
        creates: /usr/share/keyrings/kubernetes-apt-keyring.gpg_armored
      tags:
        - install_pre_kube_packages

    - name: 13.6 De-Armor Kubernetes APT Key
      ansible.builtin.shell: gpg --dearmor < /usr/share/keyrings/kubernetes-apt-keyring.gpg_armored > /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      no_log: true
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      tags:
        - install_pre_kube_packages

    - name: 13.7 Add Kubernetes APT Key
      ansible.builtin.shell: |
        set -o pipefail
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' \
        | sudo tee /etc/apt/sources.list.d/kubernetes.list
      register: apt_output
      changed_when: apt_output.rc != 0
      args:
        executable: /bin/bash
      tags:
        - install_pre_kube_packages

    - name: 14.1 Update Cache
      ansible.builtin.apt:
        update_cache: true
        autoclean: true
      tags:
        - install_kube_packages

    - name: 14.2 Remove apt lock file
      ansible.builtin.file:
        state: absent
        path: "/var/lib/dpkg/lock"
      tags:
        - install_kube_packages

    - name: 14.3 Install Required Packages
      ansible.builtin.apt:
        name: "{{ kube_packages }}"
      tags:
        - install_kube_packages

    - name: 14.4 Hold Packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items: "{{ kube_packages }}"
      tags:
        - install_kube_packages

- name: Setup first Control node
  gather_facts: true
  hosts: first_controller
  become: true

  tasks:
    - name: 1. Initialize Cluster
      ansible.builtin.shell: |
        set -o pipefail
        sudo kubeadm init --control-plane-endpoint={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} --pod-network-cidr=10.0.0.0/16
      register: init_cluster_output
      changed_when: init_cluster_output.rc != 0
      args:
        executable: /bin/bash

    - name: 2.1 Create .kube Directory
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        mode: "0755"
      tags:
        - kube_admin_config

    - name: 2.2 Copy Kubernetes Admin Config
      ansible.builtin.copy:
        remote_src: true
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        mode: "0755"
      tags:
        - kube_admin_config

    - name: 2.3 Change Config File Permission
      ansible.builtin.command: chown ubuntu:ubuntu /home/ubuntu/.kube/config
      changed_when: false
      when: not ansible_env.HOME is undefined
      tags:
        - kube_admin_config

    - name: 3. Install An Overlay Network
      ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/ahmedmlaouhia/flannel-conf/refs/heads/main/kube-flannel.yml
      register: init_cluster_output
      changed_when: init_cluster_output.rc != 0
      become: false

    - name: 12.1 Reboot
      ansible.builtin.reboot:
      register: system_reboot

    - name: 12.2 Verify Reboot Success
      ansible.builtin.ping:
      when: system_reboot.rebooted

    - name: 4.1 Generate a Certificate Key for Additional Control Planes
      ansible.builtin.command: kubeadm init phase upload-certs --upload-certs
      register: cert_key_output
      become: true

    - name: 4.2 Generate Join String
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command_output
      become: true

    - name: 5.2 Create Control Plane Connection String
      ansible.builtin.copy:
        content: "{{ join_command_output.stdout }} --control-plane --certificate-key {{ cert_key_output.stdout.split()[-1] }}"
        dest: control_plane_conn_string
        mode: "0755"

    - name: 5.3 Create Worker Connection String
      ansible.builtin.copy:
        content: "{{ join_command_output.stdout }}"
        dest: worker_conn_string
        mode: "0755"

- name: Fetch connection strings from control plane
  hosts: first_controller
  gather_facts: true
  tasks:
    - name: Fetch control plane connection string
      ansible.builtin.fetch:
        src: control_plane_conn_string
        dest: control_plane_conn_string
        flat: true

    - name: Fetch worker connection string
      ansible.builtin.fetch:
        src: worker_conn_string
        dest: worker_conn_string
        flat: true

- name: Join second control node
  gather_facts: true
  hosts: second-controller
  become: true
  vars:
    control_join_string: "{{ lookup('ansible.builtin.file', 'control_plane_conn_string') }}"
  tasks:
    - name: 1. Add second control plane To The Cluster
      ansible.builtin.command: "{{ control_join_string }}"
      changed_when: false

- name: Join Worker Nodes
  gather_facts: true
  hosts: workers
  become: true
  vars:
    worker_join_string: "{{ lookup('ansible.builtin.file', 'worker_conn_string') }}"
  tasks:
    - name: 2. Add Worker Nodes To The Cluster
      ansible.builtin.command: "{{ worker_join_string }}"
      changed_when: false

- name: check cluster status
  hosts: first_controller
  gather_facts: true
  tasks:
    - name: check cluster status
      ansible.builtin.shell: kubectl get nodes
      register: cluster_status
      changed_when: false

    - name: Display Cluster Status
      ansible.builtin.debug:
        msg: "{{ cluster_status.stdout }}"
